visualGPS:
    ☐ figure out a unit testing framework @created(17-07-11 15:23)
    ☐ add rest docstrings to classes and functions @created(17-07-11 15:23)
    ☐ create VisualGPS IOC class @created(17-07-12 18:36) @started(17-07-13 12:00)
        create a factory class to register parser and readers to.
        after registering a reader and parser class the module wil create objects of expected types
        and bind them together essentially.
        ✔ have the register function accept a class and specify a role somehow @created(17-07-12 18:40) @started(17-07-13 15:21) @done (17-07-13 18:56) @lasted(3:35)
            ✔ how should we specify roles? think of a way with either strings or class name. @done (17-07-12 18:39)
                were going to check super class
        ✔ figure out why get_frame is saying self.parser doesn't have a payload attribute @created(17-07-13 18:58) @done (17-07-13 18:59)
        ☐ add more functionality to this class such as when reading a file get stats of the whole file @created(17-07-13 19:01)
        ☐ figure out a way to handle real time data. @created(17-07-13 19:03)
            were going to call a get_frame function from comreader which will pause the calling thread till it has received a full frame over serial.
    parser:
        ☐ implement content parser @created(17-07-07 18:11) @started(17-07-11 14:49)
            how do we specify in the config how to format data?
            ✔ think of way to grab payload from reader module @done (17-07-11 14:44)
                perhaps we should have parser call a reader function with parameters to grab the data
                yes this sounds good
            ✔ implement ability to interpret header structure and determine payload size and position @created(17-07-11 14:45) @started(17-07-11 14:49) @done (17-07-11 19:14) @lasted(4:25)
                payload is a pretty generic thing so maybe this should be part of the parser super class. We'll have a propak6 child class
                ✔ implement config file payload size and offset @created(17-07-11 14:50) @started(17-07-11 14:50) @done (17-07-11 16:59) @lasted(2:09)
                ✔ figure out a way to reconcile dependency between parser and reader @created(17-07-11 16:30) @started(17-07-11 16:30) @done (17-07-11 19:14) @lasted(2:44)
                    for now im just going to get the frame from file reader and then call digest_data with ProPak6 after setting up the header structure
            ☐ digest data @created(17-07-11 19:18) @started(17-07-11 19:18)
                ☐ determine message_id, message_type, where the message is @created(17-07-11 19:30) @started(17-07-14 12:54)
                    message_id of 38, 73, 75 is correct
            ✔ i don't like initiating the parser object with header structure because we would need a new one each frame. @created(17-07-12 15:05) @started(17-07-12 15:26) @done (17-07-12 18:17) @lasted(2:51)
            ✘ were going to create a register and factory possibly for the parser @created(17-07-12 16:54) @cancelled (17-07-12 18:40)
                this is now being done at the root of the visualgps module with a factory class
    reader:
        ✔ implement FileReaderController @done (17-07-07 18:01)
        ☐ implement ComReaderController
        ✔ implement header structure into reader @created(17-07-10 16:46) @done (17-07-11 14:34)
            we're removing the header structure from the parser since it makes more sense to be in the reader as the reader is static
        ✔ implement header structure parser @done (17-07-11 14:43)
            do we need to check the header structure each frame or just the first? Obviously we need to check for errors
            ✔ import header structure data with offset and size @done (17-07-07 01:15)
            ✔ encode header structure data @created(17-07-10 01:15) @started(17-07-10 17:54) @done (17-07-11 14:42) @lasted(20:48)
                ✔ create function to decode field data with encode string @done (17-07-10 18:26)
                ✔ finish adding and testing encoded fields @created(17-07-10 18:28) @started(17-07-11 13:51) @done (17-07-11 14:42) @lasted(0:51)
        ✘ Should we use bytearray rather than byte strings? @cancelled (17-07-14 16:13)
            it would actually be the same speed as using bytearray since were not appending to an existing byte string. Were just reading byte strings from a file. The byte string would have to be converted to a bytearray anyway so it's probably faster to just use the byte string. We'll use a bytearray in the future if we need to mutate it (like sending commands)
            We can't use numpy.fromfile because the frame structure isn't known until we get the header of the frame.
        tests:
            ☐ test header structure @created(17-07-11 15:23)
                to do this we need to have our own canned binary string and just test that we can pull out elements. also need a canned config file
                ☐ create canned binary data and canned config string @created(17-07-11 15:23)
    TBI:
        todo